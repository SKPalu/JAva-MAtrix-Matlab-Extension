/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package jamaextension.jamax;

public final class TestData
{

    private TestData()
    {
    }

    public static Matrix testMat1()
    {
        double[][] V =
        {
                {
                        9, 24, -24, 11, 1, 19, -19, 10, -34, 0, -10, 15, 16, 9, -41, 19
                },
                {
                        -40, 21, 16, -30, 20, 24, -17, 7, -40, -19, -25, -18, 17, -13, 9, -18
                },
                {
                        21, 39, 7, -1, 17, 28, 13, 1, -8, 24, 15, -4, -6, 2, 47, 17
                },
                {
                        49, 20, -28, -1, -8, -30, -28, -30, 29, 7, 45, -13, -62, -11, 21, -33
                },
                {
                        -21, 36, -65, 0, -11, 6, 23, -28, 4, -30, -16, -2, 4, -14, 59, 3
                },
                {
                        26, -36, -2, -10, -9, 7, 17, -11, 20, 40, -25, 46, 48, 11, 15, -60
                },
                {
                        38, -1, -30, 33, -44, -30, -25, -36, -35, 9, -7, -18, 31, 22, 56, -15
                },
                {
                        -48, -5, 18, -56, -7, -22, -8, -32, -14, 44, 20, -40, -47, 63, -10, 14
                },
                {
                        -43, -48, 15, 13, 4, 32, -36, 44, -8, 34, -26, 14, -2, -41, -34, -10
                },
                {
                        17, 8, 51, 27, 9, -4, -66, 2, -36, -21, -36, -27, -20, -31, -6, 37
                },
                {
                        -12, -32, 18, 22, 43, 12, 30, -37, -40, -39, -4, 1, -31, 31, 36, -19
                },
                {
                        21, 42, -19, 17, -11, 3, -16, -1, 28, -2, -2, -19, -37, -12, -33, -70
                }
        };
        return new Matrix(V);
    }

    public static Matrix testMat2()
    {
        double[][] test =
        {
                {
                        10, 6, 5, 5, 9, 1, 4, 2
                },
                {
                        9, 3, 7, 3, 3, 9, 7, 8
                },
                {
                        5, 3, 5, 2, 1, 2, 1, 5
                },
                {
                        4, 3, 10, 0, 4, 2, 6, 3
                },
                {
                        9, 4, 9, 8, 8, 6, 2, 6
                },
                {
                        1, 6, 4, 10, 1, 9, 0, 9
                },
                {
                        9, 2, 7, 3, 7, 7, 0, 2
                },
                {
                        0, 2, 1, 0, 9, 3, 10, 8
                },
                {
                        9, 5, 2, 8, 8, 1, 4, 7
                },
                {
                        9, 3, 6, 1, 1, 7, 5, 8
                }
        };

        return new Matrix(test);
    }

    public static Matrix testMatNan(int tol)
    {
        double[][] test =
        {
                {
                        10, 6, 5, 5, 9, 1, 4, 2
                },
                {
                        9, 3, 7, 3, 3, 9, 7, 8
                },
                {
                        5, 3, 5, 2, 1, 2, 1, 5
                },
                {
                        4, 3, 10, 0, 4, 2, 6, 3
                },
                {
                        9, 4, 9, 8, 8, 6, 2, 6
                },
                {
                        1, 6, 4, 10, 1, 9, 0, 9
                },
                {
                        9, 2, 7, 3, 7, 7, 0, 2
                },
                {
                        0, 2, 1, 0, 9, 3, 10, 8
                },
                {
                        9, 5, 2, 8, 8, 1, 4, 7
                },
                {
                        9, 3, 6, 1, 1, 7, 5, 8
                }
        };

        Matrix mat = new Matrix(test);
        FindInd find = mat.LTEQ(tol).findIJ();
        if (find.isNull())
        {
            return mat;
        }

        int[] ind = find.getIndex();
        mat.setElements(ind, Double.NaN);

        return mat;// new Matrix(test);
    }

}