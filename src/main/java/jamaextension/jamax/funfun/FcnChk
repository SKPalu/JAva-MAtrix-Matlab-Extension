package com.feynmance.jnumeric.jamax.funfun;

import com.feynmance.jnumeric.jamax.*;
import com.feynmance.jnumeric.jamax.constants.*;
import com.feynmance.jnumeric.jamax.strfun.*;

/**
 *
 * @author Sione
 */
public class FcnChk {

    private Object function;
    private String message;

    public FcnChk(Object fun, Object... varargin) {

    if(fun==null){
       throw new ConditionalRuleException("FcnChk", "Parameter \"fun\" must be non-null.") ;
     }

String msgident = "";
int vargIn = 0;
if(varargin!=null && varargin.length!=0){
    vargIn = varargin.length;
}

boolean vectorizing = false;
int nin = vargIn + 1;
if (nin>1 && (varargin!=null && varargin.length!=0) && varargin[vargIn-1].equals("vectorized")){//(nin>1) && strcmp(varargin{end},'vectorized')
    vectorizing = true;
    nin = nin-1;
}else{
    vectorizing = false;
}//end

Object f = null;

if (fun instanceof String){
    fun = ((String)fun).trim();//strtrim_local_function(fun);
    // Check for non-alphanumeric characters that must be part of an
    // expression.
    if (fun==null){
        f = inline('[]');
    }else if(!vectorizing && isidentifier_local_function((String)fun)){// ~vectorizing && isidentifier_local_function(fun)
        f = str2func(fun); // Must be a function name only
        // Note that we avoid collision of f = str2func(fun) with any local
        // function named fun, by uglifying the local function's name
        if("x".equals(fun)){ //isequal('x',fun)
            /*
            warning('MATLAB:fcnchk:AmbiguousX', ...
                ['Ambiguous expression or function input.\n The string ''x'' will be ',...
                'interpreted as the name of a ',...
                'function called ''x'' \n (e.g., x.m) and not as the mathematical expression ''x'' (i.e., f(x)=x). \n ',...
                'Use the anonymous function:  @(x)x  ',...
                'if you meant the mathematical expression ''x''.']);
            */
            String warn = "Ambiguous expression or function input.\n The string \"x\" will be  interpreted as the name of a  function called \"x\" ";
            System.out.println(""+warn);
        }//end
    }else{
        if (vectorizing){
            f = inline(vectorize(fun),varargin{1:nin-1});
            var = argnames(f);
            f = inline([formula(f) '.*ones(size(' var{1} '))'],var{1:end});
        }else{
            f = inline(fun,varargin{1:nin-1});
        }//end
    }//end
}else if(){// isa(fun,'function_handle')
    f = fun;
    // is it a matlab object with a feval method?
}else if(){// isobject(fun)
    // delay the methods call unless we know it is an object to avoid runtime error for compiler
    meths = methods(class(fun),'-full');
    if(){// any(strmatch('feval',meths,'exact'))
       if(){// vectorizing && any(strmatch('vectorize',meths,'exact'))
          f = vectorize(fun);
       }else{
          f = fun;
       }//end
    }else{ // no feval method
        f = '';
        message = "If FUN is a MATLAB object, it must have an feval method.';
        msgident = "MATLAB:fcnchk:objectMissingFevalMethod";
    }//end
}else{
    f = '';
    message = ['FUN must be a function, a valid string expression, ', ...
            sprintf('\n'),'or an inline function object.'];
    msgident = 'MATLAB:fcnchk:invalidFunctionSpecifier';
}//end

// If no errors and nothing to report then we are done.
//if nargout < 2 && isempty(message)
//    return
//end

// compute MSG
if (message==null){
    msg.message = '';
    msg.identifier = '';
    msg = msg(zeros(0,1)); // make sure msg is the right dimension
}else{
    msg.message = message;
    msg.identifier = msgident;
}//end

//if nargout < 2, error(msg); end

    }

    private boolean isidentifier_local_function(String str){
        boolean tf = false;

if (str!=null){
    char first = str.charAt(0);//str(1);
    if(Character.isLetter(first)){// (isletter(first)){
        Indices letters = StrUtil.isletter(str);
        Indices numerals = StrUtil.stringGTEQ(str, 48).AND( StrUtil.stringLTEQ(str, 57));//(48 <= str) & (str <= 57);
        Indices underscore = StrUtil.stringEQ(str, 95);//(95 == str);
        tf = letters.OR( numerals).OR(underscore).trueAll();
    }//end
}//end

        return tf;
     }

    /**
     * @return the function
     */
    public Object getFunction() {
        return function;
    }

    /**
     * @return the message
     */
    public String getMessage() {
        return message;
    }
}
